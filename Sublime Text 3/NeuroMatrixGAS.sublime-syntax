%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: NeuroMatrixGAS
file_extensions: [s]
scope: source.c
variables: 
  ident: '[a-zA-Z_][\.a-zA-Z0-9_]*'
  section_ident: '\.?[a-zA-Z][\.a-zA-Z0-9_]+'
  const: '[0-1_]*[bB][lL]?|[0-7_]*[oO][lL]?|-?[0-9_]*[lL]?|[0-9][0-9a-fA-F_]*[hH][lL]?'
  language_consts: '[v]?true|[v]?false'
  sections: 'begin|data|nobits'
  sregs_main: 'gr[0-7]|ar[0-7]|pc|pswr|intr|sp'
  sregs_vexp: 'f[1-2]cr[hl]?|vr[hl]?|nb1[hl]?|sb[hl]?'
  sregs_vexp_f: 'vlen|sir|fp_pack_exp|fp[0-4]_flags|fp[0-4]_[dlh]mask'
  vregs: 'data|ram|wfifo|afifo'
  vregs_f: 'vreg[0-7]'
  operators: '\+|-|\*|/|[ARC]?<<|[ARC]?>>|<|<=|>|>=|==|!=|\b(not|and|xor|or)\b|='
  voperators: 'vsum|activate|mask|shift'
  voperators_f: 'set|mask'
  vtypes_f: '(matrix|float|double|retrive|retrieve|in_high|in_low|fixed_(32|64)|packer)'
  pseudo_func: 'float|double|hiword|loword|offset|sizeof'
  pseudo_const: '[\+-][0-9]*(\.[0-9]*(E[\+-][0-9]*)?)?'
  keywords: 'set|with|clear|delayed|noflags'
  keyword_commands: 'push|pop|ftw|wtw|nul'
  jump_commands: 'goto|skip|call|i?return|callrel'
  bind_type: 'local|global|extern|weak|own'
  data_type: 'word|long|label'
  directives: '(align|branch|endif|endrepeat|if|repeat|wait|nm6403|nm6405)'
  debug_directives: '\.debug_(arange|die|die_child|die_endchild|end_sequence|frame_cie|frame_fde|line|pubname|root_die|source_directory|source_file|start_sequence)'
contexts:
  main:
    #- meta_scope: show_scope_name
    - include: global
    - include: code
    - match: '\.(data|nobits)\s+(")?({{section_ident}})(")'
      captures:
        1: keyword.control
        2: punctuation.definition.string.begin
        3: string.quoted.double
        4: punctuation.definition.string.end
        5: punctuation.terminator
      push:
        - include: global
        - match: '\b(end)\s+(")?({{section_ident}})(")?'
          captures:
            1: keyword.control
            2: punctuation.definition.string.begin
            3: string.quoted.double
            4: punctuation.definition.string.end
          push: 
            - match: ;
              scope: punctuation.terminator
              pop: 2

    - match: '(\.section)\s+(.*)\s*$'
      captures:
        1: keyword.control
        2: string.quoted.double

    - match: '(\.macro)\s+({{ident}})\s+((\b({{ident}}\b)(,))*\b({{ident}}))?'
      captures:
        1: keyword.declaration.function
        2: entity.name.function
        4: variable.parameter
        6: punctuation.separator
        7: variable.parameter
      scope: 
      push:
        - include: code
        - match: '\\{{ident}}'
          scope: variable.parameter
        - match: '(\.endm)'
          scope: keyword.declaration.function
          pop: true

  code:
    - include: global
    - match: '{{ident}}\s*:\s*$'
      scope: entity.name.label

    - match: '\bif\b'
      scope: keyword.control.conditional

    - match: '\b({{keywords}})\b'
      scope: keyword.operator.word

    - match: '\b({{keyword_commands}})\b'
      scope: keyword.operator.word

    - match: '\b({{jump_commands}})\b'
      scope: keyword.operator.word

    - match: '\b({{language_consts}})\b'
      scope: constant.language

    - match: '\b({{sregs_main}}|{{sregs_vexp}}|{{sregs_vexp_f}})\b'
      scope: variable.language

    - match: '({{operators}})'
      scope: keyword.operator.arithmetic

    - match: '({{pseudo_func}})'
      scope: variable.function

    - match: '\b(fpu|rep)\b'
      scope: keyword.operator.word
      push: vector_instruction

  global:
    # Comments begin with a '//' and finish at the end of the line
    #- match: '(({{bind_type}})\s+)?({{ident}})\s*(:)\s*({{data_type}})'
    - match: '((\.{{bind_type}})\s+)?({{ident}})\s*$'
      captures:
        2: storage.modifier
        3: constant.language

    - match: ';'
      scope: punctuation.terminator

    - match: 'import'
      scope: keyword.control

    - match: '({{pseudo_func}})'

      scope: variable.function
    - match: '//'
      scope: punctuation.definition.comment
      push: line_comment

    # Comments begin with a '//' and finish at the end of the line
    - match: '/\*'
      scope: punctuation.definition.comment
      push: block_comment

    # Numbers
    - match: '\b({{const}})\b'
      scope: constant.numeric

    - match: '([\[\]])'
      scope: keyword.other

    - match: '[,:]'
      scope: punctuation.separator

    - match: '\.({{directives}})'
      scope: meta.preprocessor

  vector_instruction:
    - include: code
    - match: '\b({{vregs}}|{{vregs_f}})\b'
      scope: variable.language

    - match: '\b(rep|fpu)\b'
      scope: keyword.operator.word

    - match: '\b({{voperators_f}}|{{voperators}})\b'
      scope: keyword.control

    - match: '\?'
      scope: keyword.operator.arithmetic

    - match: '\.\b({{vtypes_f}})\b'
      scope: keyword.control

    - match: $
      pop: true

  functions_parametres:
    #- match: \b({{ident}})\b
    - match: \b(\w*)\b
      scope: variable.parameter
    - match: ','
      scope: punctuation.separator
    - match: '$'
      scope: punctuation.section.brackets.end                 
      pop: true

  line_comment:
    - meta_scope: comment.line
    - match: $
      pop: true

  block_comment:
    - meta_scope: comment.block
    - match: '\*/'
      scope: punctuation.definition.comment
      pop: true
